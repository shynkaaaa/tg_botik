from aiogram import types
from aiogram.filters import Command
from aiogram.dispatcher.router import Router

from config.keyboards import get_inline_keyboard
from utils.metro_parser import parse_schedule
router = Router()

@router.message(Command("schedule"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=get_inline_keyboard()
    )

@router.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    data = callback.data 
    schedule = parse_schedule()
    response = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç—Ä–æ:\n\n"

    if data.startswith("station_"): 
        id = int(data.split("_")[1])
        print(f"ID: {id}\n")
        response += f"üöâ –°—Ç–∞–Ω—Ü–∏—è: {schedule[id]['station']}\n"
        response += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–†–∞–π—ã–º–±–µ–∫ –±–∞—Ç—ã—Ä–∞ - –ë.–ú–æ–º—ã—à—É–ª—ã): {schedule[id]['time_to']}\n"
        response += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–ë.–ú–æ–º—ã—à—É–ª—ã - –†–∞–π—ã–º–±–µ–∫ –±–∞—Ç—ã—Ä–∞): {schedule[id]['time_from']}\n\n"

    elif data == "general_schedule":
        for entry in schedule:
            response += f"üöâ –°—Ç–∞–Ω—Ü–∏—è: {entry['station']}\n"
            response += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–†–∞–π—ã–º–±–µ–∫ –±–∞—Ç—ã—Ä–∞ - –ë.–ú–æ–º—ã—à—É–ª—ã): {entry['time_to']}\n"
            response += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–ë.–ú–æ–º—ã—à—É–ª—ã - –†–∞–π—ã–º–±–µ–∫ –±–∞—Ç—ã—Ä–∞): {entry['time_from']}\n\n"

    await callback.answer(response)

def register_schedule_handlers(dp):
    dp.include_router(router)